import math

def print_board(b):
    print("\n")
    print(f" {b[0]} | {b[1]} | {b[2]} ")
    print("---+---+---")
    print(f" {b[3]} | {b[4]} | {b[5]} ")
    print("---+---+---")
    print(f" {b[6]} | {b[7]} | {b[8]} ")
    print("\n")

def check_winner(b):
    wins = [
        (0,1,2), (3,4,5), (6,7,8),  # rows
        (0,3,6), (1,4,7), (2,5,8),  # cols
        (0,4,8), (2,4,6)            # diagonals
    ]
    for i,j,k in wins:
        if b[i] == b[j] == b[k] and b[i] in ("X","O"):
            return b[i]
    return None

def is_draw(b):
    return all(cell in ("X", "O") for cell in b)

# Minimax algorithm
def minimax(board, depth, is_maximizing):
    winner = check_winner(board)
    if winner == "O":  # computer wins
        return 1
    elif winner == "X":  # player wins
        return -1
    elif is_draw(board):
        return 0

    if is_maximizing:  # computer's turn
        best_score = -math.inf
        for i in range(9):
            if board[i] not in ("X", "O"):
                board[i] = "O"
                score = minimax(board, depth+1, False)
                board[i] = str(i+1)
                best_score = max(best_score, score)
        return best_score
    else:  # player's turn
        best_score = math.inf
        for i in range(9):
            if board[i] not in ("X", "O"):
                board[i] = "X"
                score = minimax(board, depth+1, True)
                board[i] = str(i+1)
                best_score = min(best_score, score)
        return best_score

def best_move(board):
    best_score = -math.inf
    move = None
    for i in range(9):
        if board[i] not in ("X","O"):
            board[i] = "O"
            score = minimax(board, 0, False)
            board[i] = str(i+1)
            if score > best_score:
                best_score = score
                move = i
    return move

def get_player_move(board):
    while True:
        try:
            pos = int(input("Enter your move (1-9): ")) - 1
            if pos not in range(9):
                print("Choose 1-9.")
                continue
            if board[pos] in ("X","O"):
                print("That spot is taken!")
                continue
            return pos
        except ValueError:
            print("Enter a valid number.")

def main():
    board = [str(i+1) for i in range(9)]
    print("Tic-Tac-Toe vs Computer (Unbeatable AI)")
    print("You are X, computer is O")
    print_board(board)

    while True:
        # Player move
        move = get_player_move(board)
        board[move] = "X"

        if check_winner(board) == "X":
            print_board(board)
            print("ðŸŽ‰ You win!")
            break
        if is_draw(board):
            print_board(board)
            print("It's a draw!")
            break

        # Computer move
        comp = best_move(board)
        board[comp] = "O"

        if check_winner(board) == "O":
            print_board(board)
            print("ðŸ’» Computer wins!")
            break
        if is_draw(board):
            print_board(board)
            print("It's a draw!")
            break

        print_board(board)

if __name__ == "__main__":
    main()
